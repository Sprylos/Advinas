{
    "width": 17,
    "height": 24,
    "tiles": [
        {
            "type": "GAME_VALUE",
            "x": 6,
            "d": {
                "gv": "STARTING_MONEY",
                "d": 500,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 7,
            "d": {
                "gv": "TOWERS_PROJECTILE_SPEED",
                "d": -30,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 8,
            "d": {
                "gv": "TOWERS_ATTACK_SPEED",
                "d": -70,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 9,
            "d": {
                "gv": "STARTING_HEALTH",
                "d": -19,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 10,
            "d": {
                "gv": "TOWERS_MAX_UPGRADE_LEVEL",
                "d": -2,
                "o": 0
            }
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 1
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 1
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 1
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 1
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 1
        },
        {
            "type": "SOURCE",
            "x": 6,
            "y": 2,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 7,
            "y": 2,
            "d": {
                "rd": 0.4,
                "r": [
                    {
                        "t": "VECTOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 8,
            "y": 2,
            "d": {
                "rd": 0.1,
                "r": [
                    {
                        "t": "MATRIX",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 9,
            "y": 2,
            "d": {
                "rd": 0.05,
                "r": [
                    {
                        "t": "TENSOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 10,
            "y": 2,
            "d": {
                "rd": 0.02,
                "r": [
                    {
                        "t": "INFIAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 3
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 3
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 3
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 3
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 3
        },
        {
            "type": "SOURCE",
            "x": 6,
            "y": 4,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 7,
            "y": 4,
            "d": {
                "rd": 0.4,
                "r": [
                    {
                        "t": "VECTOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 8,
            "y": 4,
            "d": {
                "rd": 0.1,
                "r": [
                    {
                        "t": "MATRIX",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 9,
            "y": 4,
            "d": {
                "rd": 0.05,
                "r": [
                    {
                        "t": "TENSOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 10,
            "y": 4,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 85
                    },
                    {
                        "t": "VECTOR",
                        "a": 8
                    },
                    {
                        "t": "MATRIX",
                        "a": 4
                    },
                    {
                        "t": "TENSOR",
                        "a": 2
                    },
                    {
                        "t": "INFIAR",
                        "a": 1
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 6,
            "y": 5,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 7,
            "y": 5,
            "d": {
                "rd": 0.4,
                "r": [
                    {
                        "t": "VECTOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 8,
            "y": 5,
            "d": {
                "rd": 0.1,
                "r": [
                    {
                        "t": "MATRIX",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 9,
            "y": 5,
            "d": {
                "rd": 0.05,
                "r": [
                    {
                        "t": "TENSOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 10,
            "y": 5,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 85
                    },
                    {
                        "t": "VECTOR",
                        "a": 8
                    },
                    {
                        "t": "MATRIX",
                        "a": 4
                    },
                    {
                        "t": "TENSOR",
                        "a": 2
                    },
                    {
                        "t": "INFIAR",
                        "a": 1
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 6,
            "y": 6,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 7,
            "y": 6,
            "d": {
                "rd": 0.4,
                "r": [
                    {
                        "t": "VECTOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 8,
            "y": 6,
            "d": {
                "rd": 0.1,
                "r": [
                    {
                        "t": "MATRIX",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 9,
            "y": 6,
            "d": {
                "rd": 0.05,
                "r": [
                    {
                        "t": "TENSOR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 10,
            "y": 6,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 85
                    },
                    {
                        "t": "VECTOR",
                        "a": 8
                    },
                    {
                        "t": "MATRIX",
                        "a": 4
                    },
                    {
                        "t": "TENSOR",
                        "a": 2
                    },
                    {
                        "t": "INFIAR",
                        "a": 1
                    }
                ]
            }
        },
        {
            "type": "SCRIPT",
            "x": 8,
            "y": 7,
            "d": {
                "id": 6897953057619969822,
                "script": "--[[\n== Zecred ==\n\nEnemies\nexplode,\nminers give\nbonuses.\n\n--]]\n\ndofile(\"scripts/utils/binder.lua\")\n\n-- functions\nlocal initialize\nlocal drawListener\nlocal setupListener\nlocal disposeListener\nlocal updateZecredUi\n\n-- global variables\nlocal roadTiles = {}\n\nlocal gvProjSpeed\nlocal gvAttackSpeed\nlocal gvUpgradeLevel\nlocal coinsAdded = 0\nlocal healthAdded = 0\n\nlocal Label -- binding to gdx's Label class, becomes nil after deserialization (Label is not in registry)\nlocal uiLayer -- becomes nil after deserialization (UiLayer is not in registry)\nlocal statsLabel -- becomes nil after deserialization (Label is not in registry)\n\nlocal uiVars = {\n    _noSyncCheck = true,\n    uiNeedsUpdate = false\n}\n\nlocal addEnemy = function(enemyType, speed, health, killScore, killBounty, killExp, tileX, tileY, sideShift)\n    local creep = managers.EnemyManager:getFactory(enemyType):create()\n    creep:setSpeed(speed)\n    creep.maxHealth = health;\n    creep:setHealth(health);\n    creep.killScore = killScore;\n    creep.bounty = killBounty;\n    creep:setKillExp(killExp);\n\n    local tile = SP.map:getMap():getTile(tileX, tileY)\n    SP.enemy:addEnemy(creep, tile, sideShift)\nend\n\n-- System listeners --------------------------------------------------------------------------------\n\nlocal enemySystemListener = luajava.createProxy(GNS .. \"systems.EnemySystem$EnemySystemListener\", {\n    enemyDie = function(enemy, tower, damageType, fromAbility)\n        local explosion = managers.ExplosionManager:getFactory(enums.ExplosionType.GENERIC):obtain();\n\n        local enemyFactory = managers.EnemyManager:getFactory(enemy.type)\n        explosion:setup(tower, enemy:getPosition().x, enemy:getPosition().y, enemy.maxHealth * 0.05, 1.25, 0, enemyFactory:getColor())\n        SP.explosion:register(explosion)\n        explosion:explode()\n    end,\n\n    enemyReachedTarget = function(enemy)\n\n    end,\n\n    affectsGameState = function() return true end,\n    getConstantId = function() return 1000901 end\n})\n\nlocal mapSystemListener = luajava.createProxy(GNS .. \"systems.MapSystem$MapSystemListener\", {\n    enemySpawnedOnMap = function(enemy)\n        if enemy.killScore == 0 then return nil end\n\n        local road = roadTiles[utils.syncRandInt(#roadTiles) + 1]\n        addEnemy(\n                enemy.type,\n                enemy:getSpeed(),\n                enemy.maxHealth,\n                0,\n                0,\n                enemy:getKillExp(),\n                road:getX(),\n                road:getY(),\n                -1)\n    end,\n\n    affectsGameState = function() return true end,\n    getConstantId = function() return 1000902 end\n})\n\nlocal minerSystemListener = luajava.createProxy(GNS .. \"systems.MinerSystem$MinerSystemListener\", {\n    minerResourcesChanged = function(miner, resourceType, delta, mined)\n        if mined then\n            SP.gameState:removeResources(resourceType, delta);\n\n            if resourceType == enums.ResourceType.SCALAR then\n                SP.gameState:addMoney(5 * delta, true)\n                coinsAdded = coinsAdded + 5 * delta\n            elseif resourceType == enums.ResourceType.VECTOR then\n                gvProjSpeed.value = gvProjSpeed.value + 1\n            elseif resourceType == enums.ResourceType.MATRIX then\n                gvAttackSpeed.value = gvAttackSpeed.value + 1\n            elseif resourceType == enums.ResourceType.TENSOR then\n                SP.gameState:addHealth(delta)\n                healthAdded = healthAdded + delta\n            elseif resourceType == enums.ResourceType.INFIAR then\n                if gvUpgradeLevel.value < 9 then\n                    gvUpgradeLevel.value = gvUpgradeLevel.value + 1\n                end\n            end\n\n            SP.gameValue:recalculate()\n\n            uiVars.uiNeedsUpdate = true\n        end\n    end,\n\n    affectsGameState = function() return true end,\n    getConstantId = function() return 1000903 end\n})\n\n-- Functions and script system listeners -----------------------------------------------------------\n\nupdateZecredUi = function()\n    uiVars.uiNeedsUpdate = false\n\n    if SP._graphics == nil then return end -- No graphics - skipping\n\n    --  Example - restore bindings and UI in a runtime:\n    --\n    --    if uiLayer == nil then\n    --        -- uiLayer was not created or has being nilled after deserialization - recreating UI\n    --        uiLayer = managers.UiManager:addLayer(MainUiLayer.SCREEN, 9009, \"zecred stats\")\n    --\n    --        if Label == nil then\n    --            Label = luajava.bindClass(GDXNS .. \"scenes.scene2d.ui.Label\")\n    --        end\n    --\n    --        statsLabel = luajava.new(Label, \"\", managers.AssetManager:getLabelStyle(CFG.FONT_SIZE_SMALL))\n    --        statsLabel:setAlignment(0)\n    --        uiLayer:getTable():add(statsLabel):expandY():bottom():padBottom(16)\n    --    end\n\n    -- updating ui\n    statsLabel:setText(\"Projectile speed: \" .. gvProjSpeed.value .. \"\\n\"\n            .. \"Attack speed: \" .. gvAttackSpeed.value .. \"\\n\"\n            .. \"Upgrade level: \" .. gvUpgradeLevel.value .. \"\\n\"\n            .. \"Coins: \" .. coinsAdded .. \"\\n\"\n            .. \"Health: \" .. healthAdded)\nend\n\ndrawListener = function(batch, deltaTime)\n    if uiVars.uiNeedsUpdate or uiLayer == nil then\n        updateZecredUi()\n    end\nend\n\n-- Listens for state restoration (state being deserialized)\n-- It is a proper place to restore bindings and recreate UI\n-- You can also do that during runtime by checking whether the variable became empty with == nil\ninitialize = function()\n    if SP._graphics ~= nil then\n        Label = luajava.bindClass(GDXNS .. \"scenes.scene2d.ui.Label\")\n\n        uiLayer = managers.UiManager:addLayer(bind(\"managers.UiManager$MainUiLayer\").SCREEN, 9009, \"zecred stats\")\n        statsLabel = luajava.new(Label, \"\", managers.AssetManager:getLabelStyle(CFG.FONT_SIZE_SMALL))\n        statsLabel:setAlignment(0)\n        uiLayer:getTable():add(statsLabel):expandY():bottom():padBottom(16 + math.random() * 10)\n\n        log(\"UI recreated\")\n    end\n    uiVars.uiNeedsUpdate = true\n\n    -- TODO restore class bindings / recreate UI and other stuff which is not being serialized\n    log(\"State restored\")\nend\n\nsetupListener = function()\n    local tiles = SP.map:getMap().tilesArray\n    for i = 1, tiles.size do\n        local tile = tiles.items[i]\n        if tile.type == enums.TileType.ROAD then\n            table.insert(roadTiles, tile)\n        end\n    end\n    log((#roadTiles) .. \" road tiles found\")\n\n    gvProjSpeed = luajava.newInstance(GNS .. \"GameValueConfig\", enums.GameValueType.TOWERS_PROJECTILE_SPEED, 0, false, false)\n    SP.map:getMap().targetTile:addGameValue(gvProjSpeed)\n    gvAttackSpeed = luajava.newInstance(GNS .. \"GameValueConfig\", enums.GameValueType.TOWERS_ATTACK_SPEED, 0, false, false)\n    SP.map:getMap().targetTile:addGameValue(gvAttackSpeed)\n    gvUpgradeLevel = luajava.newInstance(GNS .. \"GameValueConfig\", enums.GameValueType.TOWERS_MAX_UPGRADE_LEVEL, 0, false, false)\n    SP.map:getMap().targetTile:addGameValue(gvUpgradeLevel)\n\n    addEventHandler(\"SystemDispose\", disposeListener)\n\n    SP.enemy.listeners:add(enemySystemListener)\n    SP.map.listeners:add(mapSystemListener)\n    SP.miner.listeners:add(minerSystemListener)\n\n    initialize()\nend\n\ndisposeListener = function()\n    removeEventHandler(\"SystemDraw\", drawListener)\n    removeEventHandler(\"SystemPostSetup\", setupListener)\n    removeEventHandler(\"SystemDispose\", disposeListener)\n    removeEventHandler(\"StateRestored\", initialize)\n\n    SP.enemy.listeners:remove(enemySystemListener)\n    SP.map.listeners:remove(mapSystemListener)\n    SP.miner.listeners:remove(minerSystemListener)\n\n    if uiLayer ~= nil then\n        managers.UiManager:removeLayer(uiLayer)\n        uiLayer = nil\n    end\nend\n\naddEventHandler(\"StateRestored\", initialize)\naddEventHandler(\"SystemPostSetup\", setupListener)\naddEventHandler(\"SystemDraw\", drawListener)"
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 5,
            "y": 8,
            "d": {
                "gv": "TOWERS_MAX_EXP_LEVEL",
                "d": 100,
                "o": 1
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 6,
            "y": 8,
            "d": {
                "gv": "EXTENDED_STATISTICS",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 7,
            "y": 8,
            "d": {
                "gv": "ENEMIES_WALK_ON_PLATFORMS",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 8,
            "y": 8,
            "d": {
                "gv": "EMOJI_ENEMIES",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 9,
            "y": 8,
            "d": {
                "gv": "SCORE",
                "d": -90,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 10,
            "y": 8,
            "d": {
                "gv": "TOWER_BLAST_STUN_DURATION",
                "d": -65,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 11,
            "y": 8,
            "d": {
                "gv": "MODIFIER_BALANCE_COUNT",
                "d": 10,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 12,
            "y": 8,
            "d": {
                "gv": "MINERS_MAX_UPGRADE_LEVEL",
                "d": 7,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_CRUSHER",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 1,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_MISSILE",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 2,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_SNIPER",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 3,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_AIR",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 4,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_BLAST",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 5,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_MULTISHOT",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 6,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_TESLA",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 7,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_CANNON",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 8,
            "y": 9,
            "d": {
                "gv": "MINER_COUNT_INFIAR",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 9,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_VENOM",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 10,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_BASIC",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 11,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_MINIGUN",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 12,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_FLAMETHROWER",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 13,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_SPLASH",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 14,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_LASER",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 15,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_FREEZING",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "GAME_VALUE",
            "x": 16,
            "y": 9,
            "d": {
                "gv": "TOWER_TYPE_GAUSS",
                "d": 1,
                "o": 0
            }
        },
        {
            "type": "ROAD",
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 1,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 2,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 4,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 6,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 7,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 8,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 9,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 10,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 12,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 13,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 14,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 15,
            "y": 10
        },
        {
            "type": "ROAD",
            "x": 16,
            "y": 10
        },
        {
            "type": "PLATFORM",
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 1,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 11,
            "d": {
                "bt": "PWR_MULTIPLIER",
                "bl": 5
            }
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 11,
            "d": {
                "bt": "DAMAGE",
                "bl": 5
            }
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 15,
            "y": 11
        },
        {
            "type": "PLATFORM",
            "x": 16,
            "y": 11,
            "d": {
                "bt": "ATTACK_SPEED",
                "bl": 5
            }
        },
        {
            "type": "PLATFORM",
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 1,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 15,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "x": 16,
            "y": 12
        },
        {
            "type": "PLATFORM",
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 1,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 15,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "x": 16,
            "y": 13
        },
        {
            "type": "PLATFORM",
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 1,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 8,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 15,
            "y": 14
        },
        {
            "type": "PLATFORM",
            "x": 16,
            "y": 14
        },
        {
            "type": "XM_MUSIC_TRACK",
            "x": 8,
            "y": 15,
            "d": {
                "id": 6789707677061405827,
                "track": ""
            }
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 16
        },
        {
            "type": "ROAD",
            "x": 6,
            "y": 16
        },
        {
            "type": "ROAD",
            "x": 7,
            "y": 16
        },
        {
            "type": "BOSS",
            "x": 8,
            "y": 16,
            "d": {
                "btt": "CUSTOM",
                "ce": [],
                "cbwc": {
                    "cl": 20,
                    "rc": -1,
                    "sd": 40,
                    "bwp": [
                        {
                            "w": 1,
                            "bt": "CONSTRUCTOR"
                        }
                    ]
                }
            }
        },
        {
            "type": "ROAD",
            "x": 9,
            "y": 16
        },
        {
            "type": "ROAD",
            "x": 10,
            "y": 16
        },
        {
            "type": "PLATFORM",
            "x": 11,
            "y": 16
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 16
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 17
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 17
        },
        {
            "type": "ROAD",
            "x": 6,
            "y": 17
        },
        {
            "type": "ROAD",
            "x": 7,
            "y": 17
        },
        {
            "type": "ROAD",
            "x": 8,
            "y": 17
        },
        {
            "type": "ROAD",
            "x": 9,
            "y": 17
        },
        {
            "type": "ROAD",
            "x": 10,
            "y": 17
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 17
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 17
        },
        {
            "type": "PLATFORM",
            "x": 2,
            "y": 18
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 18
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 18,
            "d": {
                "bt": "BONUS_COINS",
                "bl": 3
            }
        },
        {
            "type": "ROAD",
            "x": 6,
            "y": 18
        },
        {
            "type": "ROAD",
            "x": 8,
            "y": 18
        },
        {
            "type": "ROAD",
            "x": 10,
            "y": 18
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 18
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 18
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 19
        },
        {
            "type": "ROAD",
            "x": 6,
            "y": 19
        },
        {
            "type": "ROAD",
            "x": 7,
            "y": 19
        },
        {
            "type": "ROAD",
            "x": 8,
            "y": 19
        },
        {
            "type": "ROAD",
            "x": 9,
            "y": 19
        },
        {
            "type": "ROAD",
            "x": 10,
            "y": 19
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 19
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 19
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 19
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 20
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 20
        },
        {
            "type": "SPAWN",
            "x": 7,
            "y": 20,
            "d": {
                "d": 20,
                "ae": [
                    {
                        "t": "REGULAR",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "STRONG",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "JET",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "HEALER",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "FIGHTER",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "BOSS",
                        "f": 1,
                        "l": 300
                    }
                ]
            }
        },
        {
            "type": "SPAWN",
            "x": 8,
            "y": 20,
            "d": {
                "d": 20,
                "ae": [
                    {
                        "t": "REGULAR",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "FAST",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "HELI",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "FIGHTER",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "LIGHT",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "BOSS",
                        "f": 1,
                        "l": 300
                    }
                ]
            }
        },
        {
            "type": "SPAWN",
            "x": 9,
            "y": 20,
            "d": {
                "d": 20,
                "ae": [
                    {
                        "t": "REGULAR",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "STRONG",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "ARMORED",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "FIGHTER",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "LIGHT",
                        "f": 1,
                        "l": 300
                    },
                    {
                        "t": "BOSS",
                        "f": 1,
                        "l": 300
                    }
                ]
            }
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 20
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 20
        },
        {
            "type": "PLATFORM",
            "x": 14,
            "y": 20
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 5,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 11,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 13,
            "y": 21
        },
        {
            "type": "PLATFORM",
            "x": 3,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 4,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 5,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 7,
            "y": 22
        },
        {
            "type": "TARGET",
            "x": 8,
            "y": 22,
            "d": {
                "da": true,
                "usgv": true,
                "gv": [
                    {
                        "t": "ENEMIES_MAX_PATH_SEARCHES",
                        "v": 100,
                        "o": false,
                        "b": true
                    }
                ]
            }
        },
        {
            "type": "PLATFORM",
            "x": 9,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 10,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 11,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 22
        },
        {
            "type": "PLATFORM",
            "x": 5,
            "y": 23
        },
        {
            "type": "PLATFORM",
            "x": 6,
            "y": 23
        },
        {
            "type": "CORE",
            "x": 8,
            "y": 23,
            "d": {
                "n": "RPG",
                "icon": "icon-nuke",
                "t": "REGULAR",
                "eg": 1.5,
                "flx": false,
                "u": [
                    {
                        "s": false,
                        "ia": false,
                        "gv": "TOWERS_EXPERIENCE_GENERATION",
                        "l": 64,
                        "cc": false,
                        "ul": [
                            {
                                "d": 1,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": true,
                        "ia": false,
                        "gv": "WAVE_INTERVAL",
                        "l": 24,
                        "cc": false,
                        "ul": [
                            {
                                "d": 3,
                                "p": 1
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_COUNT_INFIAR",
                        "l": 64,
                        "cc": false,
                        "ul": [
                            {
                                "d": 1,
                                "p": 1
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "TOWERS_DAMAGE",
                        "l": 64,
                        "cc": false,
                        "ul": [
                            {
                                "d": 8,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_INFIAR_SPEED",
                        "l": 0,
                        "cc": false,
                        "ul": [
                            {
                                "d": 10,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_COUNT_TENSOR",
                        "l": 72,
                        "cc": false,
                        "ul": [
                            {
                                "d": 1,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MODIFIER_MINING_SPEED_COUNT",
                        "l": 64,
                        "cc": false,
                        "ul": [
                            {
                                "d": 4,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_TENSOR_SPEED",
                        "l": 0,
                        "cc": false,
                        "ul": [
                            {
                                "d": 12,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_COUNT_MATRIX",
                        "l": 72,
                        "cc": false,
                        "ul": [
                            {
                                "d": 1,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MODIFIER_MINING_SPEED_VALUE",
                        "l": 0,
                        "cc": false,
                        "ul": [
                            {
                                "d": 3,
                                "p": 2
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINERS_SPEED",
                        "l": 0,
                        "cc": false,
                        "ul": [
                            {
                                "d": 5,
                                "p": 3
                            }
                        ]
                    },
                    {
                        "s": false,
                        "ia": false,
                        "gv": "MINER_COUNT_VECTOR",
                        "l": 8,
                        "cc": false,
                        "ul": [
                            {
                                "d": 1,
                                "p": 3
                            }
                        ]
                    }
                ]
            }
        },
        {
            "type": "PLATFORM",
            "x": 11,
            "y": 23
        },
        {
            "type": "PLATFORM",
            "x": 12,
            "y": 23,
            "d": {
                "bt": "SELL_REFUND",
                "bl": 3
            }
        }
    ],
    "gates": [
        {
            "type": "TELEPORT",
            "x": 5,
            "y": 11,
            "side": "LEFT",
            "index": 14
        },
        {
            "type": "TELEPORT",
            "x": 6,
            "y": 11,
            "side": "LEFT",
            "index": 14
        },
        {
            "type": "TELEPORT",
            "x": 11,
            "y": 11,
            "side": "LEFT",
            "index": 5
        },
        {
            "type": "TELEPORT",
            "x": 12,
            "y": 11,
            "side": "LEFT",
            "index": 5
        },
        {
            "type": "TELEPORT",
            "x": 17,
            "y": 11,
            "side": "LEFT",
            "index": 12
        },
        {
            "type": "TELEPORT",
            "x": 0,
            "y": 14,
            "side": "LEFT",
            "index": 9
        },
        {
            "type": "TELEPORT",
            "x": 5,
            "y": 14,
            "side": "LEFT",
            "index": 10
        },
        {
            "type": "TELEPORT",
            "x": 6,
            "y": 14,
            "side": "LEFT",
            "index": 10
        },
        {
            "type": "TELEPORT",
            "x": 11,
            "y": 14,
            "side": "LEFT",
            "index": 0
        },
        {
            "type": "TELEPORT",
            "x": 12,
            "y": 14,
            "side": "LEFT",
            "index": 0
        },
        {
            "type": "TELEPORT",
            "x": 17,
            "y": 14,
            "side": "LEFT",
            "index": 1
        },
        {
            "type": "TELEPORT",
            "x": 3,
            "y": 16,
            "side": "BOTTOM",
            "index": 12
        },
        {
            "type": "TELEPORT",
            "x": 6,
            "y": 16,
            "side": "BOTTOM",
            "index": 9
        },
        {
            "type": "TELEPORT",
            "x": 10,
            "y": 16,
            "side": "BOTTOM",
            "index": 9
        },
        {
            "type": "TELEPORT",
            "x": 13,
            "y": 16,
            "side": "BOTTOM",
            "index": 1
        },
        {
            "type": "TELEPORT",
            "x": 8,
            "y": 17,
            "side": "BOTTOM",
            "index": 9
        }
    ]
}