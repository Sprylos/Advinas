{
    "width": 6,
    "height": 7,
    "tiles": [
        {
            "type": "TARGET",
            "d": {
                "da": true,
                "usgv": true,
                "gv": [
                    {
                        "t": "STARTING_MONEY",
                        "v": 0,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "GAME_SAVES",
                        "v": 0,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "AUTO_WAVE_CALL",
                        "v": 0,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "MINER_COUNT_SCALAR",
                        "v": 1,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "MINERS_INSTALL_DURATION",
                        "v": 5,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "MINER_SCALAR_INSTALL_DURATION",
                        "v": 5,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "TOWERS_MAX_EXP_LEVEL",
                        "v": 20,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "TOWERS_MAX_UPGRADE_LEVEL",
                        "v": 10,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "TOWERS_RANGE",
                        "v": 75,
                        "o": true,
                        "b": true
                    },
                    {
                        "t": "TOWERS_ATTACK_SPEED",
                        "v": 200,
                        "o": true,
                        "b": true
                    }
                ]
            }
        },
        {
            "type": "SPAWN",
            "x": 5,
            "d": {
                "d": 100,
                "ae": [
                    {
                        "t": "REGULAR",
                        "f": 1,
                        "l": 0
                    },
                    {
                        "t": "FAST",
                        "f": 1,
                        "l": 0
                    },
                    {
                        "t": "STRONG",
                        "f": 1,
                        "l": 0
                    }
                ]
            }
        },
        {
            "type": "ROAD",
            "y": 1
        },
        {
            "type": "PLATFORM",
            "x": 1,
            "y": 1,
            "d": {
                "bt": "PWR_MULTIPLIER",
                "bl": 5
            },
            "building": {
                "bType": "TOWER",
                "type": "BASIC",
                "as": "FIRST",
                "e": 255940,
                "ul": 10,
                "ia": [
                    true,
                    true,
                    true,
                    true,
                    true,
                    true
                ]
            }
        },
        {
            "type": "ROAD",
            "x": 5,
            "y": 1
        },
        {
            "type": "ROAD",
            "y": 2
        },
        {
            "type": "ROAD",
            "x": 1,
            "y": 2
        },
        {
            "type": "ROAD",
            "x": 2,
            "y": 2
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 2
        },
        {
            "type": "SCRIPT",
            "x": 1,
            "y": 3,
            "d": {
                "id": 6898274292516103396,
                "script": "--[[\n0.4\nI18nGenerator {\n    \"tut_04_010_010_in_this_tutorial\",\n    \"tut_04_010_020_lets_make_coins\",\n    \"tut_04_010_030_defeat_first_wave\",\n    \"tut_04_020_010_enemies_can_pass\",\n    \"tut_04_020_020_select_any_teleport\",\n    \"tut_04_020_030_select_teleport\",\n    \"tut_04_030_010_deal_with_second_wave\",\n    \"tut_04_030_020_defeat_one_more_wave\",\n    \"tut_04_040_010_as_you_could_see\",\n    \"tut_04_040_020_barriers_can_block\",\n    \"tut_04_040_030_select_barrier\",\n    \"tut_04_040_040_barriers_can_also\",\n    \"tut_04_050_010_lets_talk_about_resources\",\n    \"tut_04_050_020_resources_are_useful\",\n    \"tut_04_050_030_resources_can_be_obtained\",\n    \"tut_04_050_040_select_source_tile\",\n    \"tut_04_060_010_youll_use_miners\",\n    \"tut_04_060_020_we_have_enough_coins\",\n    \"tut_04_060_030_build_a_miner\",\n    \"tut_04_060_040_you_have_limited\",\n    \"tut_04_070_010_miners_take_time\",\n    \"tut_04_070_020_installation_progress\",\n    \"tut_04_070_030_wait_for_miner\",\n    \"tut_04_070_040_each_next_miner\",\n    \"tut_04_070_050_now_just_watch\",\n    \"tut_04_070_060_defeat_remaining_waves\"\n}\n--]]\n\ndofile(\"scripts/utils/binder.lua\")\ndofile(\"scripts/utils/tutorial.lua\")\n\nlocal TAG = \"0.4.lua: \"\n\nlocal i18n = function() return managers.LocaleManager.i18n end\nlocal sm = function() return SP._graphics.storylineMessages end\nlocal ql = function() return SP._graphics.questList end\n\nlocal questListItem\nlocal s6_sideMenuWasOffscreen\nlocal s5_ready = false\n\nlocal tut\n\nlog(TAG .. \"Level 0.4 script was successfully loaded\")\n\naddEventHandler(\"SystemPostSetup\", function()\n    SP._input:setHotKeysEnabled(false)\n    SP._graphics.mainUi:showMessagesButton(false, nil)\n    SP._graphics.mainUi:hideGameSpeedButton()\n    SP.achievement:setEnabled(false)\n    managers.UiManager:findActor(\"build_menu_miner_build_buttons\"):setVisible(false)\n\n    tut:start()\n\n    SP.gameState.listeners:add(luajava.createProxy(GNS .. \"systems.GameStateSystem$GameStateSystemListener\", {\n        realUpdate = function(deltaTime)\n            tut:update(deltaTime)\n        end,\n\n        affectsGameState = function() return false end\n    }))\n\n    local towerX, towerY\n    SP.tower.listeners:add(luajava.createProxy(GNS .. \"systems.TowerSystem$TowerSystemListener\", {\n        towerPreSold = function(tower, coins)\n            towerX = tower:getTile():getX()\n            towerY = tower:getTile():getY()\n        end,\n\n        towerSold = function(tower, coins)\n            local newTower = SP.tower:buildTower(enums.TowerType.CANNON, nil, towerX, towerY, true)\n            newTower:addExperience(90001)\n            newTower:upgrade(10)\n            for i = 0, 5 do\n                SP.tower:setAbilityInstalled(newTower, i, true)\n            end\n            newTower.moneySpentOn:set(0)\n        end,\n\n        affectsGameState = function() return false end\n    }))\n\n    log(TAG .. \"Started\")\nend)\n\ntut = tutorial:new({\n    {-- \u041f\u043e\u0431\u0435\u0434\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u0443\u044e \u0432\u043e\u043b\u043d\u0443\n        check = function()\n            return SP.wave:getCompletedWavesCount() >= 1\n        end,\n        start = function()\n            log(\"Stage 1 start\")\n\n            -- \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043e\u043b\u043d\u044b \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0430\u0439\u043c\u0435\u0440 \u0432\u043e\u043b\u043d\u044b\n            tut:condition(function() return SP.wave.wave ~= nil end, function()\n                SP._graphics.mainUi:hideNextWaveButton()\n                SP.wave:freezeTimeToNextWave(9001)\n            end)\n\n            tut:delay(1, function()\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_010_010_in_this_tutorial\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_010_020_lets_make_coins\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 1 sm continue\")\n\n                        -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a MDPS\n                        SP._graphics.mainUi:showMdps(true, nil)\n\n                        -- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0432\u0435\u0441\u0442\n                        questListItem = ql():addQuestListItem()\n                        questListItem:setText(i18n():get(\"tut_04_010_030_defeat_first_wave\"))\n                    end\n                }))\n            end)\n        end,\n        done = function()\n            log(\"Stage 1 done\")\n\n            questListItem:setCompleted(true)\n            tut:delay(1, function()\n                ql():removeQuestListItem(questListItem)\n\n                tut:startNextStage()\n            end)\n        end\n    },\n    {-- \u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0435\u043b\u0435\u043f\u043e\u0440\u0442\n        check = function()\n            return SP.map:getSelectedGate() ~= nil and SP.map:getSelectedGate():getType() == enums.GateType.TELEPORT\n        end,\n        start = function()\n            log(\"Stage 2 start\")\n\n            SP.map:removeHighlights()\n            local map = SP.map:getMap()\n            for y = 0, map.heightTiles do\n                for x = 0, map.widthTiles do\n                    for i = 1, 2 do\n                        local gate = map:getGate(x, y, bind(\"Gate$Side\").values[i])\n                        if gate ~= nil and gate:getType() == enums.GateType.TELEPORT then\n                            SP.map:highlightGate(gate)\n                        end\n                    end\n                end\n            end\n\n            sm():queue({\n                tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_020_010_enemies_can_pass\"),\n                tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_020_020_select_any_teleport\")\n            })\n            sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                run = function()\n                    log(\"Stage 2 sm continue\")\n                    questListItem = ql():addQuestListItem()\n                    questListItem:setText(i18n():get(\"tut_04_020_030_select_teleport\"))\n                end\n            }))\n        end,\n        done = function()\n            log(\"Stage 2 done\")\n\n            SP.gameState:addCompletedQuest(\"Q:0.4:1\")\n\n            SP.map:removeHighlights()\n\n            questListItem:setCompleted(true)\n            tut:delay(2, function()\n                ql():removeQuestListItem(questListItem)\n\n                tut:startNextStage()\n            end)\n        end\n    },\n    {-- \u041f\u043e\u0431\u0435\u0434\u0438\u0442\u044c \u0432\u0442\u043e\u0440\u0443\u044e \u0432\u043e\u043b\u043d\u0443\n        check = function()\n            return SP.wave:getCompletedWavesCount() >= 2\n        end,\n        start = function()\n            log(\"Stage 3 start\")\n\n            -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u0432\u044b\u0437\u043e\u0432\u0430 \u0432\u043e\u043b\u043d\u044b\n            SP._graphics.mainUi:showNextWaveButton(false, nil)\n            SP.wave:freezeTimeToNextWave(-1)\n\n            -- \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043e\u043b\u043d\u044b \u0441\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0430\u0439\u043c\u0435\u0440 \u0432\u043e\u043b\u043d\u044b\n            tut:condition(function() return SP.wave.wave.waveNumber == 2 end, function()\n                SP._graphics.mainUi:hideNextWaveButton()\n                SP.wave:freezeTimeToNextWave(9001)\n            end)\n\n            sm():queue({\n                tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_030_010_deal_with_second_wave\")\n            })\n            sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                run = function()\n                    log(\"Stage 3 sm continue\")\n\n                    -- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0432\u0435\u0441\u0442\n                    questListItem = ql():addQuestListItem()\n                    questListItem:setText(i18n():get(\"tut_04_030_020_defeat_one_more_wave\"))\n                end\n            }))\n        end,\n        done = function()\n            log(\"Stage 3 done\")\n\n            questListItem:setCompleted(true)\n            tut:delay(1, function()\n                ql():removeQuestListItem(questListItem)\n                tut:startNextStage()\n            end)\n        end\n    },\n    {-- \u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0431\u0430\u0440\u044c\u0435\u0440\n        check = function()\n            return SP.map:getSelectedGate() ~= nil and SP.map:getSelectedGate():getType() == enums.GateType.BARRIER_TYPE\n        end,\n        start = function()\n            log(\"Stage 4 start\")\n\n            SP.map:removeHighlights()\n            local map = SP.map:getMap()\n            for y = 0, map.heightTiles do\n                for x = 0, map.widthTiles do\n                    for i = 1, 2 do\n                        local gate = map:getGate(x, y, bind(\"Gate$Side\").values[i])\n                        if gate ~= nil and gate:getType() == enums.GateType.BARRIER_TYPE then\n                            SP.map:highlightGate(gate)\n                        end\n                    end\n                end\n            end\n\n            sm():queue({\n                tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_040_010_as_you_could_see\"),\n                tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_040_020_barriers_can_block\")\n            })\n            sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                run = function()\n                    log(\"Stage 4 sm continue\")\n                    questListItem = ql():addQuestListItem()\n                    questListItem:setText(i18n():get(\"tut_04_040_030_select_barrier\"))\n                end\n            }))\n        end,\n        done = function()\n            log(\"Stage 4 done\")\n\n            SP.map:removeHighlights()\n\n            questListItem:setCompleted(true)\n\n            tut:delay(2, function()\n                ql():removeQuestListItem(questListItem)\n\n                -- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c STRONG \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u0440\u0430\u0433\u043e\u0432\n                local map = SP.map:getMap()\n                for y = 0, map.heightTiles do\n                    for x = 0, map.widthTiles do\n                        for i = 1, 2 do\n                            local gate = map:getGate(x, y, bind(\"Gate$Side\").values[i])\n                            if gate ~= nil and gate:getType() == enums.GateType.BARRIER_TYPE then\n                                gate.blockedEnemies:add(enums.EnemyType.STRONG)\n                                SP.map:setGate(gate:getX(), gate:getY(), gate:getSide(), gate)\n                            end\n                        end\n                    end\n                end\n\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_040_040_barriers_can_also\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 4 sm continue\")\n                        tut:startNextStage()\n                    end\n                }))\n            end)\n        end\n    },\n    {-- \u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0430\u0439\u043b \u0441 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u043c\n        check = function()\n            return s5_ready and SP.map:getSelectedTile() ~= nil and SP.map:getSelectedTile().type == enums.TileType.SOURCE\n        end,\n        start = function()\n            log(\"Stage 5 start\")\n\n            SP.map:removeHighlights()\n            SP.map:setSelectedTile(nil)\n\n            local map = SP.map:getMap()\n            for y = 0, map.heightTiles - 1 do\n                for x = 0, map.widthTiles - 1 do\n                    local tile = map:getTile(x, y)\n                    if tile ~= nil and tile.type == enums.TileType.SOURCE then\n                        SP.map:highlightTile(tile)\n                    end\n                end\n            end\n\n            tut:delay(1, function()\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_050_010_lets_talk_about_resources\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_050_020_resources_are_useful\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_050_030_resources_can_be_obtained\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 5 sm continue\")\n                        questListItem = ql():addQuestListItem()\n                        questListItem:setText(i18n():get(\"tut_04_050_040_select_source_tile\"))\n\n                        s5_ready = true\n                    end\n                }))\n            end)\n        end,\n        done = function()\n            log(\"Stage 5 done\")\n\n            --            SP.map:removeHighlights()\n\n            SP.gameState:addCompletedQuest(\"Q:0.4:2\")\n\n            questListItem:setCompleted(true)\n            tut:delay(2, function()\n                log(\"Stage 5 done continue\")\n                ql():removeQuestListItem(questListItem)\n\n                tut:startNextStage()\n            end)\n        end\n    },\n    {-- \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0430\u0439\u043d\u0435\u0440\n        check = function()\n            return SP.miner.miners.size ~= 0\n        end,\n        update = function()\n            local sideMenuOffscreen = SP._graphics.sideMenu:isOffscreen()\n            if s6_sideMenuWasOffscreen ~= sideMenuOffscreen then\n                -- \u041c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 UI\n                managers.UiManager:removeAllHighlights()\n\n                if sideMenuOffscreen then\n                    -- \u041c\u0435\u043d\u044e \u0441\u043a\u0440\u044b\u0442\u043e - \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u043c\u0435\u043d\u044e\n                    managers.UiManager:addHighlight(managers.UiManager:findActor(\"side_menu_toggle_button\"))\n                else\n                    -- \u041c\u0435\u043d\u044e \u043e\u0442\u043a\u0440\u044b\u0442\u043e, \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n                    managers.UiManager:addHighlight(managers.UiManager:findActor(\"build_menu_miner_build_button_SCALAR\"))\n                end\n                s6_sideMenuWasOffscreen = sideMenuOffscreen\n            end\n        end,\n        start = function()\n            log(\"Stage 6 start\")\n\n            tut:delay(1, function()\n                managers.UiManager:findActor(\"build_menu_miner_build_buttons\"):setVisible(true)\n\n                -- \u041f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u0435\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u0430\u0439\u043d\u0435\u0440\u0430\n                s6_sideMenuWasOffscreen = not SP._graphics.sideMenu:isOffscreen()\n\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_060_010_youll_use_miners\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_060_020_we_have_enough_coins\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 6 sm continue\")\n                        questListItem = ql():addQuestListItem()\n                        questListItem:setText(i18n():get(\"tut_04_060_030_build_a_miner\"))\n                    end\n                }))\n            end)\n        end,\n        done = function()\n            log(\"Stage 6 done\")\n\n            SP.gameState:addCompletedQuest(\"Q:0.4:3\")\n\n            SP.map:removeHighlights()\n            managers.UiManager:removeAllHighlights()\n\n            questListItem:setCompleted(true)\n            tut:delay(2, function()\n                ql():removeQuestListItem(questListItem)\n\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_060_040_you_have_limited\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        tut:startNextStage()\n                    end\n                }))\n            end)\n        end\n    },\n    {-- \u0414\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043c\u0430\u0439\u043d\u0435\u0440\u0430\n        check = function()\n            return SP.miner.miners.size ~= 0 and SP.miner.miners:get(0):isPrepared()\n        end,\n        start = function()\n            log(\"Stage 7 start\")\n\n            tut:delay(1, function()\n                SP._graphics.mainUi:showNextWaveButton(false, nil)\n                SP.wave:freezeTimeToNextWave(-1)\n                SP._graphics.mainUi:showGameSpeedButton(false, nil)\n\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_070_010_miners_take_time\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_070_020_installation_progress\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 7 sm continue\")\n                        questListItem = ql():addQuestListItem()\n                        questListItem:setText(i18n():get(\"tut_04_070_030_wait_for_miner\"))\n                    end\n                }))\n            end)\n        end,\n        done = function()\n            log(\"Stage 7 done\")\n\n            questListItem:setCompleted(true)\n            tut:delay(1, function()\n                ql():removeQuestListItem(questListItem)\n\n                sm():queue({\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_070_040_each_next_miner\"),\n                    tut.ADVINAS_TAG .. \" \" .. i18n():get(\"tut_04_070_050_now_just_watch\")\n                })\n                sm():runOnContinue(luajava.createProxy(\"java.lang.Runnable\", {\n                    run = function()\n                        log(\"Stage 7 sm continue\")\n                        questListItem = ql():addQuestListItem()\n                        questListItem:setText(i18n():get(\"tut_04_070_060_defeat_remaining_waves\"))\n                    end\n                }))\n                tut:startNextStage()\n            end)\n        end\n    }\n})"
            }
        },
        {
            "type": "SOURCE",
            "x": 2,
            "y": 3,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 3
        },
        {
            "type": "XM_MUSIC_TRACK",
            "x": 4,
            "y": 3,
            "d": {
                "id": 4,
                "track": "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"
            }
        },
        {
            "type": "SOURCE",
            "x": 5,
            "y": 3,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "ROAD",
            "y": 4
        },
        {
            "type": "ROAD",
            "x": 1,
            "y": 4
        },
        {
            "type": "ROAD",
            "x": 2,
            "y": 4
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 4
        },
        {
            "type": "ROAD",
            "y": 5
        },
        {
            "type": "SOURCE",
            "x": 1,
            "y": 5,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "SOURCE",
            "x": 2,
            "y": 5,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 5
        },
        {
            "type": "SOURCE",
            "x": 4,
            "y": 5,
            "d": {
                "rd": 1,
                "r": [
                    {
                        "t": "SCALAR",
                        "a": 100
                    }
                ]
            }
        },
        {
            "type": "ROAD",
            "x": 5,
            "y": 5
        },
        {
            "type": "ROAD",
            "y": 6
        },
        {
            "type": "ROAD",
            "x": 1,
            "y": 6
        },
        {
            "type": "ROAD",
            "x": 2,
            "y": 6
        },
        {
            "type": "ROAD",
            "x": 3,
            "y": 6
        },
        {
            "type": "ROAD",
            "x": 4,
            "y": 6
        },
        {
            "type": "ROAD",
            "x": 5,
            "y": 6
        }
    ],
    "gates": [
        {
            "type": "TELEPORT",
            "x": 5,
            "y": 2,
            "side": "BOTTOM",
            "index": 0
        },
        {
            "type": "TELEPORT",
            "x": 5,
            "y": 5,
            "side": "BOTTOM",
            "index": 0
        },
        {
            "type": "BARRIER_TYPE",
            "x": 3,
            "y": 6,
            "side": "BOTTOM",
            "blockedEnemies": [
                "FAST"
            ]
        }
    ]
}